[tool.poetry]
name = "RO-LeetCode"
version = "0.12.0"
description = "Various LeetCode exercises done"
authors = ["Ryan Ozawa <ryan.ozawa21@gmail.com>"]
license = "MIT"
readme = "README.md"

[project]
name = "RO-LeetCode"
version = "0.12.0"
description = "Various LeetCode exercises done"
authors = [{ name = "Ryan Ozawa", email = "ryan.ozawa21@gmail.com" }]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.9"
classifiers = ["Programming Language :: Python :: 3"]

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.2.1"
ruff = "^0.0.259"
black = "^23.1.0"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.2"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "F",   # pyflakes
    "E",   # pycodestyle
    "W",   # pycodestyle warnings
    "C90", # Mccabe complexity
    # "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "BLE", # flkae8-blind-except
    "FBT", # flake8-boolean-trap
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "PD",  # pandas vet
    "PL",  # pylint:
    "TRY", # tryceratops,
    "FLY", # flynt
    "RUF", # ruff rules
]
ignore = [
    "D100",
    "TCH003", # place imports in type checking block
    "N802",   # LeetCode problems usually have camel case functions
    "ANN101", # don't need typo hint for self in instance method
    "ANN102", # don't need type hint for cls in classmethod
    "ANN401", # allow the use of typing.Any
]

# Allow autofix for listed rules.
fix = true
show-fixes = true
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

# Error output type
format = "text"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]

[tool.ruff.pydocstyle]
convention = "google"

[tool.isort]
force_sort_within_sections = true
force_single_line = true
known_first_party = []
# this new option doesn't work quite yet
# import_headings = { "STDLIB" = "Standard Library Ruff", "THIRDPARTY" = "External Party", "FIRSTPARTY" = "My Modules" }
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "External Party"
import_heading_firstparty = "My Modules"
profile = "black"
group_by_package = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
