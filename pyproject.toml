[tool.poetry]
name = "RO-LeetCode"
version = "0.8.9"
description = "Various LeetCode exercises done"
authors = ["Ryan Ozawa <ryan.ozawa21@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.2.1"
ruff = "^0.0.259"
black = "^23.1.0"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.2"

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",
    "F",
    "W",   # pycodestyle warnings
    "C90", # Mccabe complexity
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "G",   # flake8-logging
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PD",  # pandas vet
    "TRY", # tryceratops,
    "PLR", # pylint: refactor
    "RUF",
]
ignore = [
    "D100",
    "TCH003", # place imports in type checking block
    "N802",   # LeetCode problems usually have camel case functions
]

# Allow autofix for listed rules.
fix = true
show-fixes = true
fixable = [
    "A",
    "ANN",
    "ARG",
    "B",
    "BLE",
    "COM",
    "D",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "EXE",
    "F",
    "FBT",
    "G",
    "ICN",
    "INP",
    "ISC",
    "N",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "Q",
    "RET",
    "RUF",
    "S",
    "SIM",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

# Error output type
format = "text"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.per-file-ignores]
"LeetCode/study_plans/leet-75/same_tree/same_tree.py" = ["D401"]
"LeetCode/algorithms/unique_paths/uniq.py" = ["D401"]
"LeetCode/study_plans/algo_2/number_islands/num_islands.py" = ["D401"]
"LeetCode/study_plans/algo_2/provinces/num_prov.py" = ["D401"]
"LeetCode/study_plans/algo_2/next_node_tree/next_right_pointer.py" = ["D401"]
"LeetCode/study_plans/algo_2/comb_sum/combination_sum.py" = ["D401"]
"LeetCode/study_plans/algo_2/comb_sum_ii/combination_sum_2.py" = ["D401"]
"AdventOfCode/aoc_solvings/src_2022/day19.py" = ["E501"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.isort]
force_sort_within_sections = true
force_single_line = true
known_first_party = ["fundamentals", "rank_up", "test"]
# this new option doesn't work quite yet
# import_headings = { "STDLIB" = "Standard Library Ruff", "THIRDPARTY" = "External Party", "FIRSTPARTY" = "My Modules" }
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "External Party"
import_heading_firstparty = "My Modules"
profile = "black"
group_by_package = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
