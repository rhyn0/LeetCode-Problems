{
	// Place your Leetcode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"LeetCode Problem Template": {
		"scope": "python",
		"prefix": "leetclass",
		"description": "Template for filling in the LeetCode solution class in Python",
		"body": [
			"$BLOCK_COMMENT_START${6:Problem is From}",
			"\n${3:Problem Name} on LeetCode.\n",
			"====================================================\n",
			"Setup:",
			"    >>> sol = Solution()",
			"    >>> example_case_1 = ${4:Args}",
			"",
			"Example 1:",
			"    >>> sol.${1}(example_case_1)",
			"    ${5:Result}",
			"$BLOCK_COMMENT_END",
			"class Solution:  # noqa: D101",
			"    def ${1: func}(${2:ARGS}):\n        ${0:...}",
		]
	},
	"LeetCode Doctest Examples": {
		"scope": "plaintext",
		"prefix": "ltexamples",
		"description": "Layout and autofill for making an example txt for doctest in Python.",
		"body": [
			"Examples for ${1:Problem Name} on Leet Code",
			"===========================================\n",
			"Using ``Solution.${2:Func name}``\n",
			"Setup:",
			"    >>> from ${3:File name} import Solution",
			"    >>> sol = Solution()",
			"\nExample 1:",
			"    >>> sol.${2}(${4:Args})\n${0}"
		]
	},
	"LeetCode Design Problem": {
		"scope": "python",
		"prefix": "leetdesign",
		"description": "Layout the basics for creating necessary class for a LeetCode Design Problem",
		"body": [
			"$BLOCK_COMMENT_START${3:Problem Name} on LeetCode.\n",
			"====================================================\n",
			"Test Methods:",
			"    >>> test_design_inputs(${1:Solution},\\",
			"        [${1}, ${0:...}],\\",
			"        [[],],\\",
			"        )",
			"$BLOCK_COMMENT_END",
			"from typing import Any",
			"class ${1}:",
			"    def __init__(self, ${2:Arguments}) -> None:  # noqa: D107",
			"        ...\n\n",
			"def test_design_inputs(",
			"    cls: type,",
			"    func_calls: list[str],",
			"    inputs: list[list[Any]],",
			") -> list[Any]:",
			"    ${BLOCK_COMMENT_START}Call input functions with associated inputs and return their output as list.${BLOCK_COMMENT_END}",
			"    # first index is always an initialization",
			"    sol = cls(*inputs[0])",
			"    return [None] + [",
			"        sol.__getattribute__(func)(*args)",
			"        for func, args in zip(func_calls[1:], inputs[1:], strict=True)",
			"    ]",
		]
	},
	"LeetCode TreeNode Python": {
		"scope": "python",
		"prefix": "leettree",
		"description": "Base class for BinaryTree Nodes",
		"body": [
			"from typing import Self",
			"class TreeNode:  # noqa: D101",
			"    def __init__(  # noqa: D107",
			"        self, val:int=0, left: Self | None=None, right: Self | None=None,",
			"    ) -> None:",
			"        self.val = val",
			"        self.left = left",
			"        self.right = right\n",
			"    def __repr__(self) -> str:",
			"        ${BLOCK_COMMENT_START}Debugging representation.$BLOCK_COMMENT_END",
			"        return f\"TreeNode({self.val}, {self.left}, {self.right})\"\n",
			"class InvalidBinaryTreeError(Exception):",
			"    ${BLOCK_COMMENT_START}Exception for an improperly defined binary tree.${BLOCK_COMMENT_END}\n",
			"    def __init__(self, nodes: list, *args: object) -> None:",
			"        ${BLOCK_COMMENT_START}Default message and pass though args.${BLOCK_COMMENT_END}",
			"        super().__init__(f\"Invalid definition: ({','.join(nodes)})\", *args)\n",
			"def build_tree(node_list: list[int | None] | None) -> TreeNode | None:",
			"    ${BLOCK_COMMENT_START}Return binary tree made of TreeNode from inorder array.${BLOCK_COMMENT_END}",
			"    if node_list is None:",
			"        # intentinal None build",
			"        return None",
			"    if not node_list or node_list[0] is None:",
			"        raise InvalidBinaryTreeError(node_list)",
			"    tree_node_que = []",
			"    input_queue = node_list[1:]",
			"    root_node = TreeNode(node_list[0])",
			"    tree_node_que.append(root_node)",
			"    while input_queue:",
			"        left_input = input_queue.pop(0) if input_queue else None",
			"        right_input = input_queue.pop(0) if input_queue else None",
			"        current = tree_node_que.pop(0)",
			"        if left_input is not None:",
			"            left = TreeNode(left_input)",
			"            current.left = left",
			"            tree_node_que.append(left)",
			"        if right_input is not None:",
			"            right = TreeNode(right_input)",
			"            current.right = right",
			"            tree_node_que.append(right)",
			"    return root_node",
			"\ndef deconstruct_tree(root: TreeNode) -> list[int | None]:",
			"    ${BLOCK_COMMENT_START}Return inorder array from binary tree made of TreeNode.${BLOCK_COMMENT_END}",
			"    if not root:",
			"    	return []",
			"    tree_node_que: list[TreeNode | None] = []",
			"    output_queue: list[int | None] = []",
			"    tree_node_que.append(root)",
			"    while tree_node_que:",
			"	     current = tree_node_que.pop(0)",
			"	     if current is None:",
			"		 	output_queue.append(None)",
			"			continue",
			"	     output_queue.append(current.val)",
			"		 if current.left is None and current.right is None:",
			"			continue",
			"	     tree_node_que.append(current.left)",
			"	     tree_node_que.append(current.right)",
			"    return output_queue\n",
		]
	},
	"LeetCode Float Compare": {
		"scope": "python",
		"description": "Function to include when problem returns a float value to compare.",
		"prefix": "leetfloat",
		"body": [
			"from decimal import localcontext",
			"def float_compare(x: float, y: float) -> bool:",
			"    ${BLOCK_COMMENT_START}Compare the given floats given constraints of problem.${BLOCK_COMMENT_END}",
			"    with localcontext() as ctx:",
			"        # Problem says, correct if they are within 10^-5 of the correct answer",
			"        ctx.prec = 5",
			"        return (",
			"            ctx.compare(",
			"                ctx.create_decimal_from_float(x),",
			"                ctx.create_decimal_from_float(y),",
			"            )",
			"            == 0",
			"        )",
		]
	},
	"LeetCode Single Linked List": {
		"scope": "python",
		"description": "Class for single linked list impl",
		"prefix": "leetlink",
		"body": [
			"from typing import Self",
			"class InvalidLinkedListError(Exception):",
			"    ${BLOCK_COMMENT_START}Exception for an empty Linked list conversion.${BLOCK_COMMENT_END}\n",
			"    def __init__(self, nodes: list, *args: object) -> None:",
			"        ${BLOCK_COMMENT_START}Default message and pass though args.${BLOCK_COMMENT_END}",
			"        super().__init__(f\"Invalid definition: ({','.join(nodes)})\", *args)\n",
			"class ListNode:  # noqa: D101",
			"    def __init__(self, val: int =0, next: Self|None=None):  # noqa: A002, D107",
			"        self.val = val",
			"        self.next = next",
			"    def __repr__(self) -> str:",
			"        ${BLOCK_COMMENT_START}Debugging representation.$BLOCK_COMMENT_END",
			"        return f\"ListNode({self.val}, {self.next})\"\n",
			"    @classmethod",
			"    def build_list(cls, values: list[int]) -> Self:",
			"        ${BLOCK_COMMENT_START}Return constructed linked list from the values.${BLOCK_COMMENT_END}",
			"        if not values:",
			"            # intentinal None build",
			"            raise InvalidLinkedListError(values)",
			"        head = cls(values[0])",
			"        curr_head = head",
			"        for val in values[1:]:",
			"            curr_head.next = cls(val)",
			"            curr_head = curr_head.next",
			"        return head",
			"    def to_list(self) -> list[int]:",
			"        ${BLOCK_COMMENT_START}Output from current point to end as a list.${BLOCK_COMMENT_END}",
			"        output = []",
			"        head = self",
			"        while head:",
			"            output.append(head.val)",
			"            head = head.next  # type: ignore[assignment]",
			"        return output"
		]
	},
	"LeetCode Pandas": {
		"scope": "python",
		"description": "Pandas question on LeetCode",
		"prefix": "leetpd",
		"body": [
			"$BLOCK_COMMENT_START${6:Problem is From}",
			"\n${3:Problem Name} on LeetCode.\n",
			"====================================================\n",
			"Below is also how I would solve this using PostgreSQL 15.\n",
			"```sql",
			"",
			"```\n",
			"Setup:",
			"    >>> ${4:Args}",
			"",
			"Example 1:",
			"    >>> ${1}(${5: supply args})",
			"    ${6:Output}",
			"$BLOCK_COMMENT_END  # noqa: E501",
			"import pandas as pd",
			"",
			"def ${1}(${2:ARGS}) -> pd.DataFrame:",
			"    ...",
		]
	}
}
