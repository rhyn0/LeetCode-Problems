{
	// Place your Leetcode workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"LeetCode Problem Template": {
		"scope": "python",
		"prefix": "leetclass",
		"description": "Template for filling in the LeetCode solution class in Python",
		"body": [
			"$BLOCK_COMMENT_START${6}$BLOCK_COMMENT_END",
			"import doctest",
			"class Solution:  # noqa: D101",
			"    def ${1: func}(${2:ARGS}):\n        ${0:...}",
			"\ndef main():",
			"    $BLOCK_COMMENT_START${3:Problem Name} on LeetCode.\n",
			"    ====================================================\n",
			"    Setup:",
			"        >>> sol = Solution()",
			"        >>> example_case_1 = ${4:Args}",
			"",
			"    Example 1:",
			"        >>> sol.${1}(example_case_1)",
			"        ${5:Result}",
			"    $BLOCK_COMMENT_END",
			"\n\nif __name__ == \"__main__\":",
			"    doctest.testmod(",
			"        optionflags=doctest.REPORTING_FLAGS ^ doctest.FAIL_FAST",
			"        | doctest.ELLIPSIS",
			"        | doctest.NORMALIZE_WHITESPACE",
			"    )"
		]
	},
	"LeetCode Doctest Examples": {
		"scope": "plaintext",
		"prefix": "ltexamples",
		"description": "Layout and autofill for making an example txt for doctest in Python.",
		"body": [
			"Examples for ${1:Problem Name} on Leet Code",
			"===========================================\n",
			"Using ``Solution.${2:Func name}``\n",
			"Setup:",
			"    >>> from ${3:File name} import Solution",
			"    >>> sol = Solution()",
			"\nExample 1:",
			"    >>> sol.${2}(${4:Args})\n${0}"
		]
	},
	"LeetCode Design Problem": {
		"scope": "python",
		"prefix": "designleet",
		"description": "Layout the basics for creating necessary class for a LeetCode Design Problem",
		"body": [
			"import doctest",
			"class ${1}:",
			"    def __init__(self, ${2:Arguments}):",
			"        ...\n\n",
			"def main():",
			"    $BLOCK_COMMENT_START${3:Problem Name} on LeetCode.\n",
			"    ====================================================\n",
			"    Setup:",
			"        >>> sol = ${1}(${2})\n",
			"    Test Methods:",
			"        >>> $0",
			"$BLOCK_COMMENT_END",
			"\n\nif __name__ == \"__main__\":",
			"    doctest.testmod(optionflags=doctest.REPORTING_FLAGS | doctest.ELLIPSIS)"
		]
	},
	"LeetCode TreeNode Python": {
		"scope": "python",
		"prefix": "leettree",
		"description": "Base class for BinaryTree Nodes",
		"body": [
			"class TreeNode:  # noqa: D101",
			"    def __init__(self, val=0, left=None, right=None):  # noqa: D107",
			"        self.val = val",
			"        self.left = left",
			"        self.right = right\n",
			"    def __repr__(self) -> str:",
			"        ${BLOCK_COMMENT_START}Debugging representation.$BLOCK_COMMENT_END",
			"        return f\"TreeNode({self.val}, {self.left}, {self.right})\"\n",
			"class InvalidBinaryTreeError(Exception):",
			"    ${BLOCK_COMMENT_START}Exception for an improperly defined binary tree.${BLOCK_COMMENT_END}\n",
			"    def __init__(self, *args: object) -> None:",
			"        ${BLOCK_COMMENT_START}Default message and pass though args.${BLOCK_COMMENT_END}",
			"        super().__init__(\"Invalid definition\", *args)\n",
			"def build_tree(node_list: list[int | None]) -> TreeNode:",
			"    ${BLOCK_COMMENT_START}Return binary tree made of TreeNode from inorder array.${BLOCK_COMMENT_END}",
			"    if not node_list or node_list[0] is None:",
			"        raise InvalidBinaryTreeError()",
			"    tree_node_que = []",
			"    input_queue = node_list[1:]",
			"    root_node = TreeNode(node_list[0])",
			"    tree_node_que.append(root_node)",
			"    while input_queue:",
			"        left_input = input_queue.pop(0) if input_queue else None",
			"        right_input = input_queue.pop(0) if input_queue else None",
			"        current = tree_node_que.pop(0)",
			"        if left_input is not None:",
			"            left = TreeNode(left_input)",
			"            current.left = left",
			"            tree_node_que.append(left)",
			"        if right_input is not None:",
			"            right = TreeNode(right_input)",
			"            current.right = right",
			"            tree_node_que.append(right)",
			"    return root_node",
		]
	}
}
